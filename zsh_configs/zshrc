# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="hax"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# User specific environment and startup programs
OS=`uname -s`
export GOPATH=$HOME/go
PATH=$PATH:$HOME/bin:$GOPATH/bin
if [[ $OS == "Darwin" ]];
    then
    PATH=$PATH:/opt/metasploit-framework/bin
    PATH=/usr/local/opt/openssl@1.1/bin:$PATH
fi
export PATH

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# ls config
if [[ $OS == "Darwin" ]];
    then
    export LSCOLORS=Fx
    export CLICOLOR=1
else
    alias ls="ls --color"
    export LS_COLORS="di=1;35"
fi


# fuzzy_history - repeat history
fuzzy_history(){
    print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf --height=20 +s -e --tac | sed 's/ *[0-9]* *//')
}

alias fh=fuzzy_history
alias grep="grep -i --color"

# gscripts
alias gscript-shell='docker run -it -v $PWD:/root/share -v $PWD/out:/tmp gen0cide/gscript:v1'
alias gscript-build-linux-all='docker run -it -v $PWD:/root/share -v $PWD/out:/tmp gen0cide/gscript:v1 -e cd linux; gscript compile --obfuscation-level 2 -o /tmp/all /root/share/level*/*.gs'

# upx packer
alias upx-pack='docker run -v $PWD:/data lalyos/upx -k --best --ultra-brute -o ${1}.upx ${1}'

# tmux with logging
alias tmuxl='tmux new -s log_`date +%H_%M_%S` \; send-keys "~/.tmux/plugins/tmux-logging/scripts/toggle_logging.sh" Enter'

# armory2 config
# currently they are the same on either platform, but keeping separate in case platform specific flags need to be specified in the future
if [[ $OS == "Darwin" ]];
    then
    alias armory2='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools"  -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2 '
    alias armory2-shell='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools"  -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-shell '
    alias armory2-sh='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools"  -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory /bin/bash '
    alias armory2-manage='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools"  -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-manage '
    alias armory2-web='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools"  -e ARMORY_CONFIG -e DISPLAY -p 8099:8099 -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-manage runserver 0.0.0.0:8099 '
else
    alias armory2='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools" -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2 '
    alias armory2-shell='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools" -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-shell '
    alias armory2-sh='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools" -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory /bin/bash '
    alias armory2-manage='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools" -e ARMORY_CONFIG -e DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-manage '
    alias armory2-web='docker run -v "$HOME/configs/armory_config:/root/.armory" -v "$PWD:/root/current" -v "$HOME/tools/armory_custom:$HOME/tools/armory_custom" -v "$PWD/armory_data:$PWD/armory_data" -v "$HOME/tools:$HOME/tools" -e ARMORY_CONFIG -e DISPLAY -p 8099:8099 -v /tmp/.X11-unix:/tmp/.X11-unix --rm -it depthsecurity/armory armory2-manage runserver 0.0.0.0:8099 '
fi
